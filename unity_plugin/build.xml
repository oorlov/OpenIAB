<?xml version="1.0" encoding="UTF-8"?>
<project name="unity_plugin" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties"/>

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties"/>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env"/>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME"/>
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties"/>

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
            />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true"/>

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->
    <import file="${sdk.dir}/tools/ant/build.xml"/>

    <property name="unity.mac.path" location="/Applications/Unity/Unity.app/Contents/MacOS/Unity"/>
    <property name="unity.win.86.path" location="C:\Program Files\Unity\Editor\Unity.exe"/>
    <property name="unity.win.64.path" location="C:\Program Files (x86)\Unity\Editor\Unity.exe"/>

    <condition property="unity.path" value="${unity.mac.path}">
        <available file="${unity.mac.path}"/>
    </condition>
    <condition property="unity.path" value="${unity.win.86.path}">
        <available file="${unity.win.86.path}"/>
    </condition>
    <condition property="unity.path" value="${unity.win.64.path}">
        <available file="${unity.win.64.path}"/>
    </condition>

    <fail message="Unity not found. Please make sure Unity is installed at default location or provide 'unity.path' property."
          unless="unity.path"/>

    <!-- Fat jar output folder -->
    <property name="out.fat-jar.absolute.dir" location="${out.dir}/fat-jar"/>

    <!-- Path to the Unity plugin source folder -->
    <property name="unity.src.path" location="unity_src/Assets/Plugins/Android"/>

    <!-- Absolute path to the Unity source project root -->
    <property name="unity.root.absolute.path" location="unity_src"/>

    <!-- Absolute path to the Unity package -->
    <property name="unity.package.absolute.path" location="${out.dir}"/>

    <target name="build" depends="clean_plugin, release">
        <mkdir dir="${out.fat-jar.absolute.dir}"/>

        <!-- Unzip Amazon jar -->
        <unzip
                src="../library/libs/in-app-purchasing-1.0.3.jar"
                dest="${out.fat-jar.absolute.dir}"/>

        <!-- Copy library classes -->
        <copy todir="${out.fat-jar.absolute.dir}">
            <fileset dir="../library/bin/classes"/>
        </copy>
        <copy todir="${out.fat-jar.absolute.dir}">
            <fileset dir="../library/bin/aidl"/>
        </copy>

        <!-- Copy plugin classes -->
        <copy todir="${out.fat-jar.absolute.dir}">
            <fileset dir="${out.classes.absolute.dir}"/>
        </copy>

        <!-- Create plugin jar -->
        <jar destfile="${out.dir}/OpenIAB-plugin.jar"
             basedir="${out.fat-jar.absolute.dir}"/>

        <!-- Copy plugin jar to Unity project -->
        <copy todir="${unity.src.path}" file="${out.dir}/OpenIAB-plugin.jar"/>

        <!-- Copy jar dependencies to Unity project -->
        <!--<copy todir="${unity.src.path}">-->
            <!--<fileset dir="../library/libs" includes="*.jar" excludes="android-support-v4.jar"/>-->
        <!--</copy>-->

        <!-- Copy native dependencies to Unity project -->
        <!--<copy todir="${unity.src.path}">-->
            <!--<fileset dir="../library/libs/armeabi-v7a" includes="*.so"/>-->
        <!--</copy>-->

        <echo message="Unity executable: ${unity.path}"/>
        <echo message="Unity package source root: ${unity.root.absolute.path}"/>
        <echo message="Unity package build: ${unity.root.absolute.path}"/>

        <!-- Build Unity package -->
        <exec executable="${unity.path}" failonerror="true" logerror="true">
            <arg line="-batchmode"/>
            <arg line="-projectPath ${unity.root.absolute.path}"/>
            <arg line="-exportPackage Assets/OpenIAB-demo Assets/Plugins ${unity.package.absolute.path}/OpenIAB-plugin.unitypackage"/>
            <arg value="-quit"/>
        </exec>
    </target>

    <target name="clean_plugin" depends="clean">
        <delete>
            <fileset dir="${unity.src.path}" excludes="*.xml, *.xml.meta"/>
        </delete>
    </target>
</project>
